plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.cloud.tools.jib' version '3.4.1'
    id "io.freefair.lombok" version "8.6"
}

group = 'guru.qa'
version = '2.1.2'

dependencies {
    implementation project(':rangiffler-grpc-common')
    implementation project(':rangiffler-media-common')

    implementation("com.graphql-java:graphql-java-extended-scalars:22.0")

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'io.opentelemetry:opentelemetry-api:1.28.0'

    implementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}"
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.kafka:spring-kafka:${project.ext.springKafkaVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation "com.tailrocks.graphql:graphql-datetime-spring-boot-starter:${project.ext.springGraphqlDateTimeVersion}"
    implementation "net.devh:grpc-client-spring-boot-starter:${project.ext.springGrpcVersion}"
 //   implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${project.ext.springOpenApiVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // ===== Minio =====
    implementation "io.minio:minio:${minioVersion}"
}


sourceSets {
    main {
        java {
            srcDir('src/main/java')
        }
    }
}

jib {
    container {
        ports = ['8081']
        jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
        environment = [
                'VAULT_TOKEN': "${System.env.VAULT_TOKEN}".toString(),
                'TZ'         : 'Europe/Moscow'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Sentidas',
                'version'   : "${project.version}".toString()
        ]
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
        tags = ['latest', "${project.version}"]
    }
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test



tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
