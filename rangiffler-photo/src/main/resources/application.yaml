server:
  port: 8094

grpc:
  server:
    port: 8095
    # 32 MiB запас по gRPC-пейлоаду для фото
    max-inbound-message-size: 33554432

spring:
  application:
    name: rangiffler-photo
  datasource:
    hikari:
      connection-timeout: 20000
      minimum-idle: 10
      maximum-pool-size: 30
      idle-timeout: 10000
      max-lifetime: 1000
      auto-commit: true
      connection-init-sql: SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    schemas: rangiffler-photo
    locations: classpath:db/migration/rangiffler-photo
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        format_sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
    generate-ddl: true
    open-in-view: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB


logging:
  file:
    path: ./logs/rangiffler-photo
  level:
    root: INFO
    org.springframework.kafka: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: INFO
    org.springframework.jdbc.core.JdbcTemplate: DEBUG
    org.springframework.transaction: DEBUG
    org.springframework.boot.autoconfigure: INFO
    ru.sentidas.rangiffler: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

app:
  media:
    bucket: rangiffler-media
    storage:
      default: OBJECT  # OBJECT или BLOB
---
spring:
  config:
    activate:
      on-profile: 'local'
  autoconfigure:
    exclude:
      - 'org.springframework.cloud.vault.config.VaultAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultObservationAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultReactiveAutoConfiguration'
  datasource:
    url: 'jdbc:mysql://127.0.0.1:3306/rangiffler-photo?serverTimezone=UTC&createDatabaseIfNotExist=true'
    username: root
    password: root
  kafka:
    bootstrap-servers: 'localhost:9092'

grpc:
  client:
    grpcUserdataClient:
      address: 'static://localhost:8087'
      negotiationType: PLAINTEXT
    grpcGeoClient:
      address: 'static://localhost:8086'
      negotiationType: PLAINTEXT

rangiffler-geo:
  base-uri: 'http://127.0.0.1:8085'
rangiffler-userdata:
  base-uri: 'http://127.0.0.1:8088'
rangiffler-photo:
  base-uri: 'http://127.0.0.1:8094'

minio:
  endpoint: http://localhost:9002
  access-key: root
  secret-key: rootroot

app:
  media:
    public-base-url: http://localhost:9002/rangiffler-media

---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:mysql://rangiffler-all-db:3306/rangiffler-photo?serverTimezone=UTC&createDatabaseIfNotExist=true
    username: root
    password: root
    hikari:
      connection-timeout: 20000
      minimum-idle: 10
      maximum-pool-size: 30
      idle-timeout: 10000
      max-lifetime: 1000
      auto-commit: true
      connection-init-sql: SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}

grpc:
  client:
    grpcUserdataClient:
      address: 'static://userdata.rangiffler.dc:8087'
      negotiationType: PLAINTEXT
    grpcGeoClient:
      address: 'static://geo.rangiffler.dc:8086'
      negotiationType: PLAINTEXT

rangiffler-geo:
  base-uri: 'http://geo.rangiffler.dc:8085'
rangiffler-userdata:
  base-uri: 'http://userdata.rangiffler.dc:8088'
rangiffler-photo:
  base-uri: 'http://photo.rangiffler.dc:8094'

minio:
  endpoint: http://minio:9000
  access-key: ${MINIO_ACCESS_KEY:root}
  secret-key: ${MINIO_SECRET_KEY:rootroot}

app:
  media:
    public-base-url: http://localhost:9002/rangiffler-media
