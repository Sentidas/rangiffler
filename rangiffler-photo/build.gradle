plugins {
    id 'org.springframework.boot' version '3.4.2'
    id 'com.google.cloud.tools.jib' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ru.sentidas'
version = '1.0'

dependencies {
    implementation project(':rangiffler-grpc-common')
    implementation project(':rangiffler-events-common')

    implementation 'io.minio:minio:8.5.9'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation "net.devh:grpc-client-spring-boot-starter:${project.ext.springGrpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:3.25.5"
    implementation "org.springframework.kafka:spring-kafka:${project.ext.springKafkaVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "net.devh:grpc-server-spring-boot-starter:${project.ext.springGrpcVersion}"
//    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation "net.coobird:thumbnailator:${project.ext.thumbnailatorVersion}"

    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    runtimeOnly "mysql:mysql-connector-java:8.0.33"
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-mysql:${project.ext.flywayVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.h2database:h2:${project.ext.h2Version}"
}

sourceSets {
    main {
        java {
            srcDir('src/main/java')
        }
    }
}


tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

