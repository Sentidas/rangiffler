buildscript {
    ext {
        junitVersion = '5.11.4'
        allureVersion = '2.29.0'
        selenideVersion = '7.9.4'
        okhttp3Version = '4.11.0'
        retrofitVersion = '2.11.0'
        apollographqlVersion = '0.0.2'
        logbackVersion = '1.4.11'
        slf4jVersion = '2.0.9'
        springJdbcVersion = '6.1.12'
        springCryptoVersion = '6.3.1'
        p6spyVersion = '3.9.1'
        hibernateVersion = '6.6.0.Final'
        kafkaClientsVersion = '3.8.0'
        saajVersion = '3.0.4'
       // jakartaJaxbVersion = '4.0.2'
        springDataCommonsVersion = '3.3.3'
        atomicosVersion = '6.0.0'
        wiremockVersion = '3.0.1'
        fakerVersion = '1.0.2'
        ashotVersion = '1.5.4'
        gatewayIntrospectionUrl = System.getProperty("test.env") == "docker"
                ? "http://gateway.rangiffler.dc:8081/graphql"
                : "http://127.0.0.1:8081/graphql"
    }
}

plugins {
    id 'io.qameta.allure' version '2.12.0'
    id 'io.qameta.allure-adapter' version '2.12.0'
    id 'com.github.edeandrea.xjc-generation' version '1.6'
    id 'com.apollographql.apollo' version '4.3.2'
}

group = 'ru.sentidas'
version = '2.0.1'

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.22")
        aspectjWeaver.set(true)
    }
}

apollo {
    service("rangiffler") {
        generateKotlinModels.set(false)
        packageName.set("ru.sentidas")
        srcDir("src/test/graphql")
        mapScalar("Date", "java.util.Date")
        introspection {
            endpointUrl.set("$gatewayIntrospectionUrl")
            schemaFile.set(file("src/test/graphql/schema.graphqls"))
        }
        outputDirConnection {
            connectToJavaSourceSet("test")
        }
    }
}

sourceSets {
    test {
        java {
            srcDir('src/test/java')
            srcDir("$buildDir/generated/source/apollo/rangiffler")
        }
    }
}

dependencies {
    testImplementation project(':rangiffler-grpc-common')
    testImplementation project(':rangiffler-media-common')

    // Logs
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // REST
    testImplementation "com.squareup.okhttp3:logging-interceptor:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttp3Version}"
    testImplementation("com.squareup.retrofit2:retrofit:${retrofitVersion}") {
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    testImplementation("com.squareup.retrofit2:converter-jackson:${retrofitVersion}") {
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation "org.springframework.data:spring-data-commons:${springDataCommonsVersion}"
    // DB
  //  testImplementation "org.springframework:spring-jdbc:${springJdbcVersion}"

    testImplementation "com.atomikos:transactions-jta:${atomicosVersion}:jakarta"
    // bd
    testImplementation "com.mysql:mysql-connector-j:8.4.0"
    testImplementation "org.hibernate:hibernate-core:6.6.0.Final"
    testImplementation "com.atomikos:transactions-jta:6.0.0:jakarta"
    testImplementation "com.atomikos:transactions-jdbc:6.0.0"
    testImplementation "com.atomikos:transactions-hibernate4:6.0.0:jakarta"
    //redis
    testImplementation 'redis.clients:jedis:5.1.2'


    testImplementation "p6spy:p6spy:${p6spyVersion}"

    testImplementation "org.springframework.security:spring-security-crypto:${springCryptoVersion}"
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation "io.qameta.allure:allure-okhttp3:${allureVersion}"
    testImplementation "io.qameta.allure:allure-grpc:${allureVersion}"
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // Assert
    testImplementation 'org.assertj:assertj-core:3.27.3'
    // Utils
    testImplementation "ru.yandex.qatools.ashot:ashot:${ashotVersion}"
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}") {
        exclude group: 'org.yaml'
    }
    testImplementation 'commons-io:commons-io:2.16.1'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.5'
    testImplementation 'com.github.h-thurow:simple-jndi:0.24.0'
    // GraphQL
    testImplementation "com.apollographql.java:client:${apollographqlVersion}"
    testImplementation "com.apollographql.java:rx2:${apollographqlVersion}"
    testImplementation 'com.apollographql.adapters:apollo-adapters-core:0.7.0'
    // gRPC
    testImplementation "io.grpc:grpc-api:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-netty:${project.ext.grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java:${project.ext.protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}"
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0
    testImplementation "com.mysql:mysql-connector-j:8.4.0"
    testImplementation "net.coobird:thumbnailator:0.4.20"

    // Kafka
    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"
    // Wiremock
    testImplementation "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
    // Lombok
    testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named { it == "generateRangifflerApolloSources" }.configureEach {
    dependsOn("downloadRangifflerApolloSchemaFromIntrospection")
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}
tasks.named("compileTestJava").configure {
    dependsOn("generateRangifflerApolloSources")
}

// ======================== –û–°–ù–û–í–ù–û–ô –ü–†–û–ì–û–ù –¢–ï–°–¢–û–í ========================
// - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –æ–±—ã—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
// - –ò–°–ö–õ–Æ–ß–ê–ï–¢ –ø–æ—Å—Ç-–ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Ç–µ–≥—É 'redis-postcheck', —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ–∫–∞–∑–∞–ª–∞—Å—å "–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ"
test {
    options {
        systemProperties(System.getProperties())
    }

    // –≤–∞—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–ø–µ—Ä—Ç–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
    systemProperty "com.atomikos.icatch.default_jta_timeout", "60000"
    systemProperty "com.atomikos.icatch.max_timeout", "300000"
    systemProperty "com.atomikos.icatch.enable_logging", "true"
    systemProperty "com.atomikos.icatch.log_base_dir", "${buildDir}/atomikos"

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    useJUnitPlatform {
        // üî¥ –í–ê–ñ–ù–û: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–≥ –ø–æ—Å—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
     //   excludeTags 'redis-postcheck'
    }
}

//// ======================== –ü–û–°–¢-–ü–†–û–í–ï–†–ö–ê REDIS ===========================
//// - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –¢–û–õ–¨–ö–û —Ç–µ—Å—Ç—ã —Å —Ç–µ–≥–æ–º 'redis-postcheck'
//// - —Ç–æ—Ç –∂–µ classpath –∏ —Ç–∞ –∂–µ —Å—Ä–µ–¥–∞, —á—Ç–æ —É –æ–±—ã—á–Ω–æ–≥–æ test
//tasks.register('redisPostcheck', Test) {
//    description = '–ü–æ—Å—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤'
//    group = 'verification'
//
//    // —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∏ classpath, —á—Ç–æ —É test
//    testClassesDirs = sourceSets.test.output.classesDirs
//    classpath = sourceSets.test.runtimeClasspath
//
//    useJUnitPlatform {
//        // üü¢ –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç-–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
//        includeTags 'redis-postcheck'
//    }
//
//    // —Ç–µ –∂–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–ø–µ—Ä—Ç–∏ ‚Äî —á—Ç–æ–±—ã –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–ª–æ
//    options { systemProperties(System.getProperties()) }
//    systemProperty "com.atomikos.icatch.default_jta_timeout", "60000"
//    systemProperty "com.atomikos.icatch.max_timeout", "300000"
//    systemProperty "com.atomikos.icatch.enable_logging", "true"
//    systemProperty "com.atomikos.icatch.log_base_dir", "${buildDir}/atomikos"
//
//    // –±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö fork–æ–≤ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
//    maxParallelForks = 1
//
//    testLogging.showStandardStreams = true
//    testLogging.exceptionFormat = 'full'
//}
//
//// =================== –°–í–Ø–ó–¨: ¬´–ü–û–°–õ–ï test –ó–ê–ü–£–°–¢–ò postcheck¬ª =============
//// - finalizedBy –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ redisPostcheck –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è test
//// - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∏–∑ Gradle CLI, –∏ –∏–∑ IDEA –ø—Ä–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ Gradle‚Äô—É
//tasks.named('test') {
//    finalizedBy tasks.named('redisPostcheck')
//}
//
//// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –í–∫–ª—é—á–∏—Ç—å –≤ check —è–≤–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç test
//// check –∏ —Ç–∞–∫ –ø–æ—Ç—è–Ω–µ—Ç test (–∞ finalizedBy –∑–∞–ø—É—Å—Ç–∏—Ç postcheck).
//// –û—Å—Ç–∞–≤–ª—è—é –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
//tasks.named('check') {
//    dependsOn tasks.named('test')
//}
//


