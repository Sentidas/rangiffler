buildscript {
    ext {
        junitVersion = '5.11.4'
        allureVersion = '2.29.0'
        selenideVersion = '7.9.4'
        okhttp3Version = '4.11.0'
        retrofitVersion = '2.11.0'
        mysqlDriverVersion = '8.4.0'
        apollographqlVersion = '0.0.2'
        logbackVersion = '1.4.11'
        slf4jVersion = '2.0.9'
        springJdbcVersion = '6.1.12'
        springCryptoVersion = '6.3.1'
        p6spyVersion = '3.9.1'
        hibernateVersion = '6.6.0.Final'
        kafkaClientsVersion = '3.8.0'
        saajVersion = '3.0.4'
        springDataCommonsVersion = '3.3.3'
        atomicosVersion = '6.0.0'
        apollographqlVersion = '0.0.2'
        apolloAdaptersVersion = '0.7.0'
        wiremockVersion = '3.0.1'
        fakerVersion = '1.0.2'
        ashotVersion = '1.5.4'
        assertjVersion = '3.27.3'
        commonsIoVersion = '2.16.1'
        jsr305Version = '3.0.2'
        sqlFormatterVersion = '2.0.5'
        simpleJndiVersion = '0.24.0'
        gatewayIntrospectionUrl = System.getProperty("test.env") == "docker"
                ? "http://gateway.rangiffler.dc:8081/graphql"
                : "http://127.0.0.1:8081/graphql"
    }
}

plugins {
    id 'io.qameta.allure' version '2.12.0'
    id 'io.qameta.allure-adapter' version '2.12.0'
    id 'com.github.edeandrea.xjc-generation' version '1.6'
    id 'com.apollographql.apollo' version '4.3.2'
}

group = 'ru.sentidas'
version = '2.0.1'

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.22")
        aspectjWeaver.set(true)
    }
}

apollo {
    service("rangiffler") {
        generateKotlinModels.set(false)
        packageName.set("ru.sentidas")
        srcDir("src/test/graphql")
        mapScalar("Date", "java.util.Date")
        introspection {
            endpointUrl.set("$gatewayIntrospectionUrl")
            schemaFile.set(file("src/test/graphql/schema.graphqls"))
        }
        outputDirConnection {
            connectToJavaSourceSet("test")
        }
    }
}

sourceSets {
    test {
        java {
            srcDir('src/test/java')
            srcDir("$buildDir/generated/source/apollo/rangiffler")
        }
    }
}

dependencies {
    testImplementation project(':rangiffler-grpc-common')
    testImplementation project(':rangiffler-media-common')

    // Logs
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // REST
    testImplementation "com.squareup.okhttp3:logging-interceptor:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttp3Version}"
    testImplementation("com.squareup.retrofit2:retrofit:${retrofitVersion}") {
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    testImplementation("com.squareup.retrofit2:converter-jackson:${retrofitVersion}") {
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation "org.springframework.data:spring-data-commons:${springDataCommonsVersion}"
    testImplementation "org.springframework.security:spring-security-crypto:${springCryptoVersion}"
    // DB
    testImplementation "com.mysql:mysql-connector-j:${mysqlDriverVersion}"
    testImplementation "org.hibernate:hibernate-core:${hibernateVersion}"
    testImplementation "com.atomikos:transactions-jta:${atomicosVersion}:jakarta"
    testImplementation "com.atomikos:transactions-jdbc:${atomicosVersion}"
    testImplementation "com.atomikos:transactions-hibernate4:${atomicosVersion}:jakarta"
    testImplementation "p6spy:p6spy:${p6spyVersion}"
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation "io.qameta.allure:allure-okhttp3:${allureVersion}"
    testImplementation "io.qameta.allure:allure-grpc:${allureVersion}"
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // Assert
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    // Utils
    testImplementation "ru.yandex.qatools.ashot:ashot:${ashotVersion}"
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}") {
        exclude group: 'org.yaml'
    }
    // GraphQL
    testImplementation "com.apollographql.java:client:${apollographqlVersion}"
    testImplementation "com.apollographql.java:rx2:${apollographqlVersion}"
    testImplementation "com.apollographql.adapters:apollo-adapters-core:${apolloAdaptersVersion}"
    // gRPC
    testImplementation "io.grpc:grpc-api:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-netty:${project.ext.grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java:${project.ext.protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}"
    // Kafka
    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"
    // Wiremock
    testImplementation "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
    // Lombok
    testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    //  Вспомогательные утилиты
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}")
            { exclude group: 'org.yaml' }
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "com.google.code.findbugs:jsr305:${jsr305Version}"
    testImplementation "com.github.vertical-blank:sql-formatter:${sqlFormatterVersion}"
    testImplementation "com.github.h-thurow:simple-jndi:${simpleJndiVersion}"
    testImplementation "net.coobird:thumbnailator:${thumbnailatorVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named { it == "generateRangifflerApolloSources" }.configureEach {
    dependsOn("downloadRangifflerApolloSchemaFromIntrospection")
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}
tasks.named("compileTestJava").configure {
    dependsOn("generateRangifflerApolloSources")
}
// ---- Основная конфигурация тестовых задач ----
tasks.withType(Test).configureEach {

    //  системные свойства (-Dключ=значение)
    options {
        systemProperties(System.getProperties())
    }

    // настройки Atomikos (JTA транзакции)
    // systemProperty "com.atomikos.icatch.default_jta_timeout", "60000"
    // systemProperty "com.atomikos.icatch.max_timeout", "300000"
    // systemProperty "com.atomikos.icatch.enable_logging", "true"
    // systemProperty "com.atomikos.icatch.log_base_dir", "${buildDir}/atomikos"

    // Подробный вывод тестов в консоль
    testLogging {
        showStandardStreams = true          // System.out / System.err
        exceptionFormat = 'full'            // Полные стектрейсы ошибок
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    useJUnitPlatform()
}

// ---- Базовая задача test ----
// Делает test псевдонимом для testLocal
tasks.named('test') {
    dependsOn tasks.named('testLocal')  // Запуск test вызывает testLocal
    enabled = false                     // Самостоятельно test не выполняется
}

// ---- Тесты для Docker-профиля ----
tasks.register('testDocker', Test) {
    systemProperty "test.env", System.getProperty("test.env", "docker")

    useJUnitPlatform {
        // По умолчанию исключены долгие или нестабильные тесты в Docker
        def defaultExcludes = "screenshots,kafka"

        // значения из -D (если заданы), иначе берём дефолты
        def excludeRaw = System.getProperty('excludeTags', defaultExcludes)
        def includeRaw = System.getProperty('includeTags', '')

        if (excludeRaw) excludeTags(excludeRaw.split(','))
        if (includeRaw) includeTags(includeRaw.split(','))
        // Если includeTags пуст — выполнятся все тесты, кроме тех, что в excludeTags.
    }
}

// ---- Тесты для локальной среды ----
tasks.register('testLocal', Test) {
    systemProperty "test.env", System.getProperty("test.env", "local")

    useJUnitPlatform {
        // по умолчанию локально не исключаем ничего
        def excludeRaw = System.getProperty('excludeTags', '')
        def includeRaw = System.getProperty('includeTags', '')

        if (excludeRaw) excludeTags(excludeRaw.split(','))
        if (includeRaw) includeTags(includeRaw.split(','))
    }
}